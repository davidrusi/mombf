// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// modelSelectionGGMC
List modelSelectionGGMC(arma::mat y, List prCoef, List prModel, List samplerPars, arma::sp_mat Omegaini);
RcppExport SEXP _mombf_modelSelectionGGMC(SEXP ySEXP, SEXP prCoefSEXP, SEXP prModelSEXP, SEXP samplerParsSEXP, SEXP OmegainiSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type y(ySEXP);
    Rcpp::traits::input_parameter< List >::type prCoef(prCoefSEXP);
    Rcpp::traits::input_parameter< List >::type prModel(prModelSEXP);
    Rcpp::traits::input_parameter< List >::type samplerPars(samplerParsSEXP);
    Rcpp::traits::input_parameter< arma::sp_mat >::type Omegaini(OmegainiSEXP);
    rcpp_result_gen = Rcpp::wrap(modelSelectionGGMC(y, prCoef, prModel, samplerPars, Omegaini));
    return rcpp_result_gen;
END_RCPP
}
// GGM_Gibbs_parallelC
List GGM_Gibbs_parallelC(arma::mat y, List prCoef, List prModel, List samplerPars, arma::sp_mat Omegaini);
RcppExport SEXP _mombf_GGM_Gibbs_parallelC(SEXP ySEXP, SEXP prCoefSEXP, SEXP prModelSEXP, SEXP samplerParsSEXP, SEXP OmegainiSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type y(ySEXP);
    Rcpp::traits::input_parameter< List >::type prCoef(prCoefSEXP);
    Rcpp::traits::input_parameter< List >::type prModel(prModelSEXP);
    Rcpp::traits::input_parameter< List >::type samplerPars(samplerParsSEXP);
    Rcpp::traits::input_parameter< arma::sp_mat >::type Omegaini(OmegainiSEXP);
    rcpp_result_gen = Rcpp::wrap(GGM_Gibbs_parallelC(y, prCoef, prModel, samplerPars, Omegaini));
    return rcpp_result_gen;
END_RCPP
}
// rcpparma_outerproduct
arma::mat rcpparma_outerproduct(const arma::colvec& x);
RcppExport SEXP _mombf_rcpparma_outerproduct(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::colvec& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpparma_outerproduct(x));
    return rcpp_result_gen;
END_RCPP
}
// rcpparma_innerproduct
double rcpparma_innerproduct(const arma::colvec& x);
RcppExport SEXP _mombf_rcpparma_innerproduct(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::colvec& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpparma_innerproduct(x));
    return rcpp_result_gen;
END_RCPP
}
// rcpparma_bothproducts
Rcpp::List rcpparma_bothproducts(const arma::colvec& x);
RcppExport SEXP _mombf_rcpparma_bothproducts(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::colvec& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpparma_bothproducts(x));
    return rcpp_result_gen;
END_RCPP
}

RcppExport SEXP bsplineCI(void *, void *, void *);
RcppExport SEXP eprod_I(void *, void *, void *, void *, void *);
RcppExport SEXP greedyVarSelCI(void *, void *, void *, void *, void *, void *, void *, void *, void *, void *, void *, void *, void *, void *, void *, void *, void *, void *, void *, void *, void *, void *, void *, void *, void *, void *, void *, void *, void *, void *, void *, void *, void *, void *, void *, void *, void *, void *, void *, void *, void *, void *, void *, void *, void *, void *, void *, void *);
RcppExport SEXP modelSelectionEnumCI(void *, void *, void *, void *, void *, void *, void *, void *, void *, void *, void *, void *, void *, void *, void *, void *, void *, void *, void *, void *, void *, void *, void *, void *, void *, void *, void *, void *, void *, void *, void *, void *, void *, void *, void *, void *, void *, void *, void *, void *, void *, void *, void *, void *, void *, void *);
RcppExport SEXP modelSelectionGibbsCI(void *, void *, void *, void *, void *, void *, void *, void *, void *, void *, void *, void *, void *, void *, void *, void *, void *, void *, void *, void *, void *, void *, void *, void *, void *, void *, void *, void *, void *, void *, void *, void *, void *, void *, void *, void *, void *, void *, void *, void *, void *, void *, void *, void *, void *, void *, void *, void *, void *, void *, void *, void *);
RcppExport SEXP nlpMarginalCI(void *, void *, void *, void *, void *, void *, void *, void *, void *, void *, void *, void *, void *, void *, void *, void *, void *, void *, void *, void *, void *, void *, void *, void *, void *, void *, void *, void *, void *, void *, void *, void *, void *, void *, void *, void *, void *, void *);
RcppExport SEXP normalmixGibbsCI(void *, void *, void *, void *, void *, void *, void *, void *, void *, void *, void *, void *, void *);
RcppExport SEXP pimomMarginalKI(void *, void *, void *, void *, void *, void *, void *, void *, void *, void *, void *, void *, void *, void *, void *);
RcppExport SEXP pimomMarginalUI(void *, void *, void *, void *, void *, void *, void *, void *, void *, void *, void *, void *, void *, void *, void *, void *, void *);
RcppExport SEXP pmomMarginalKI(void *, void *, void *, void *, void *, void *, void *, void *, void *, void *, void *, void *, void *, void *, void *, void *);
RcppExport SEXP pmomMarginalUI(void *, void *, void *, void *, void *, void *, void *, void *, void *, void *, void *, void *, void *, void *, void *, void *, void *, void *);
RcppExport SEXP rnlpCI(void *, void *, void *, void *, void *, void *, void *, void *, void *);
RcppExport SEXP rnlpPostCI_lm(void *, void *, void *, void *, void *, void *, void *, void *, void *, void *, void *);
RcppExport SEXP rnorm_truncMultCI(void *, void *, void *, void *, void *);
RcppExport SEXP rtmvnormCI(void *, void *, void *, void *, void *, void *, void *);
RcppExport SEXP rtmvnormProdCI(void *, void *, void *, void *, void *, void *, void *, void *, void *);
RcppExport SEXP testfunctionCI(void *);

static const R_CallMethodDef CallEntries[] = {
    {"_mombf_modelSelectionGGMC", (DL_FUNC) &_mombf_modelSelectionGGMC, 5},
    {"_mombf_GGM_Gibbs_parallelC", (DL_FUNC) &_mombf_GGM_Gibbs_parallelC, 5},
    {"_mombf_rcpparma_outerproduct", (DL_FUNC) &_mombf_rcpparma_outerproduct, 1},
    {"_mombf_rcpparma_innerproduct", (DL_FUNC) &_mombf_rcpparma_innerproduct, 1},
    {"_mombf_rcpparma_bothproducts", (DL_FUNC) &_mombf_rcpparma_bothproducts, 1},
    {"bsplineCI",             (DL_FUNC) &bsplineCI,              3},
    {"eprod_I",               (DL_FUNC) &eprod_I,                5},
    {"greedyVarSelCI",        (DL_FUNC) &greedyVarSelCI,        48},
    {"modelSelectionEnumCI",  (DL_FUNC) &modelSelectionEnumCI,  46},
    {"modelSelectionGibbsCI", (DL_FUNC) &modelSelectionGibbsCI, 52},
    {"nlpMarginalCI",         (DL_FUNC) &nlpMarginalCI,         38},
    {"normalmixGibbsCI",      (DL_FUNC) &normalmixGibbsCI,      13},
    {"pimomMarginalKI",       (DL_FUNC) &pimomMarginalKI,       15},
    {"pimomMarginalUI",       (DL_FUNC) &pimomMarginalUI,       17},
    {"pmomMarginalKI",        (DL_FUNC) &pmomMarginalKI,        16},
    {"pmomMarginalUI",        (DL_FUNC) &pmomMarginalUI,        18},
    {"rnlpCI",                (DL_FUNC) &rnlpCI,                 9},
    {"rnlpPostCI_lm",         (DL_FUNC) &rnlpPostCI_lm,         11},
    {"rnorm_truncMultCI",     (DL_FUNC) &rnorm_truncMultCI,      5},
    {"rtmvnormCI",            (DL_FUNC) &rtmvnormCI,             7},
    {"rtmvnormProdCI",        (DL_FUNC) &rtmvnormProdCI,         9},
    {"testfunctionCI",        (DL_FUNC) &testfunctionCI,         1},
    {NULL, NULL, 0}
};

RcppExport void R_init_mombf(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
